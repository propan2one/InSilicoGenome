import os
import csv
import numpy as np
from random import seed
from random import randint
from random import choice
from itertools import groupby
from insilicogenome import insilicogenome

def random_table_genes(random_table_genes_file, size, genes_numbers=1):
  """
  docstring
  random_table_genes("~/Téléchargements/random_table_genes.csv", 1000, genes_numbers=3)
  """
  with open(random_table_genes_file, 'w', encoding='UTF8', newline='') as csv_file:
    writer = csv.writer(csv_file)
    seed(1)
    i=1
    while i <= genes_numbers:
        start=randint(0,size-6)
        data = [start,(start+3*randint(1,150)), choice(["+","-"])]
        writer.writerow(data)
        i += 1
        
def random_snv(FASTA, range_start, range_end, ALT, QUAL, FILTER, INFO):
    """
    Creat a list which contain information on SNP/SNP

    Parameters
    ----------
    FASTA : The name of the header and fasta file
      Fasta file, with the path (optionnal)
    sequence : A sequence of DNA between 1 and 100 000 000bp
      A string generated by random_dnasequence

    Returns
    -------
    A list

    Examples
    --------
    >>> from insilicogenome import insilicodata
    >>> insilicodata.random_snv(/path/genome.fasta, )
    """
    if ((range_start>= 0) and (range_end>0) and (range_end>range_start)):
        pass
    else:
        raise ValueError(
        "Problems with the range where the SNV occurs. "
        f"The value of range_start is '{range_start}'"
        f"The value of range_end is '{range_end}'")
    np.random.choice(range(range_start, range_end))
    if not os.path.isfile(FASTA):
        raise FileExistsError
    else:
        pass
    #fasta = insilicogenome.fasta_iter(FASTA)
    fasta = fasta_iter(FASTA)
    for ff in fasta:
        name, sequence, long_name = ff
    REF=sequence[range_start:range_start+1]
        
# Unit test
range_start=3
range_end=36    
    
    



        

# Mettre le parser dans 
def fasta_iter(FASTA):
    """
    Fasta file parser
    Credit from modified from Brent Pedersen and
         Ram & niuyw (https://www.biostars.org/p/710/)

    Parameters
    ----------
    FASTA : The name of the header and fasta file
      Fasta file

    Returns
    -------
    A generator object containing header name, sequence and header

    Examples
    --------
    >>> from insilicogenome import insilicodata
    >>> fasta = insilicogenome.fasta_iter(/path/genome.fasta)
    >>> for ff in fasta:
    ...     name, sequence, long_name = ff
    ...     print(sequence)
    
    """
    fin = open(FASTA, 'rb')
    faiter = (x[1] for x in groupby(fin, lambda line: str(line, 'utf-8')[0] == ">"))
    for header in faiter:
        headerStr = str(header.__next__(), 'utf-8')
        long_name = headerStr.strip().replace('>', '')
        name = long_name.split()[0]
        sequence = "".join(str(s, 'utf-8').strip() for s in faiter.__next__())
        yield (name, sequence, long_name)
    
    
range_start=12
range_end=36

FASTA="miniasm.fasta"
    
    